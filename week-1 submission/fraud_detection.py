# -*- coding: utf-8 -*-
"""fraud-detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NcxALq8fZq9B_SBDH4XFEBPrm5FmJDcI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv("onlinefraud.csv")

df

df=df.drop(columns=['nameOrig','nameDest','isFlaggedFraud'])

df = df.dropna(subset=['amount', 'oldbalanceOrg', 'newbalanceOrig', 'oldbalanceDest'])

df = df.dropna(subset=['newbalanceDest'])

print(df.isnull().sum())

df['type'].unique()

df= pd.get_dummies(df, columns=['type'], prefix='type')

df[['type_CASH_IN', 'type_CASH_OUT', 'type_DEBIT', 'type_PAYMENT', 'type_TRANSFER']] = df[['type_CASH_IN', 'type_CASH_OUT', 'type_DEBIT', 'type_PAYMENT', 'type_TRANSFER']].astype(int)

print(df.head())

df.info()

from sklearn.preprocessing import MinMaxScaler

# Initialize the scaler
scaler = MinMaxScaler()

# Define the numerical columns to normalize
numerical_cols = ['amount', 'oldbalanceOrg', 'newbalanceOrig', 'oldbalanceDest', 'newbalanceDest']

# Normalize the numerical columns
df[numerical_cols] = scaler.fit_transform(df[numerical_cols])

from sklearn.model_selection import train_test_split

x = df.drop('isFraud', axis=1)
y = df['isFraud']

# Split the data into training and testing sets
x_train, x_test, y_train, y_test=train_test_split(x,y, test_size=0.2, stratify=df['isFraud'], random_state=2)

print(len(df),len(x_train),len(y_test))

from imblearn.under_sampling import RandomUnderSampler

# Apply RandomUnderSampler to the training data
# rus = RandomUnderSampler(random_state=42)
# X_train_res, y_train_res = rus.fit_resample(x_train, y_train)

from imblearn.over_sampling import SMOTE
smote = SMOTE(random_state=42)
X_train_res, y_train_res = smote.fit_resample(x_train, y_train)

print(X_train_res.shape, y_train_res.shape)

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=10)
rf.fit(X_train_res, y_train_res)

from sklearn.metrics import classification_report
y_pred=rf.predict(x_test)
print(classification_report(y_test, y_pred))

# pip install shap

import shap

explainer = shap.TreeExplainer(rf)

shap_values = explainer.shap_values(X_train_res)

print("shap_values.shape",shap_values.shape)
print("X_train_res.shape",X_train_res.shape)

shap_values_positive = shap_values[:, :, 1]

# Summary plot
shap.summary_plot(shap_values_positive, X_train_res, feature_names=x.columns , plot_type="bar")
shap.summary_plot(shap_values_positive, X_train_res, feature_names=x.columns)

# Choose a specific instance (e.g., the first instance in x_test)
sample_idx = 0

# Generate force plot
shap.initjs()
shap.force_plot(explainer.expected_value[1], shap_values_positive[sample_idx], x_test.iloc[sample_idx], feature_names=x.columns)

from joblib import dump

# Assuming 'rf_model' is your trained RandomForestClassifier model
dump(rf, 'rf_model.joblib')

from google.colab import files # type: ignore

files.download('rf_model.joblib')

from joblib import dump
import sklearn
import joblib

# Check scikit-learn version
print(sklearn.__version__) 